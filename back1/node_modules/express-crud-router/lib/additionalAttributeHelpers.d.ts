import { Request } from "express";
declare type RaRecord = {
    id: string | number;
};
export declare const populateReference: <R extends RaRecord, T extends RaRecord>({ fetchAll, source, target }: {
    fetchAll: (rows: R[]) => Promise<T[]>;
    source: keyof R;
    target?: keyof T | undefined;
}) => (record: R, { rows, req }: {
    rows: R[];
    req: Request;
}) => Promise<any>;
export declare const populateReferenceMany: <R extends RaRecord, T extends RaRecord>({ fetchAll, source, target }: {
    fetchAll: (rows: R[]) => Promise<T[]>;
    source?: keyof R | undefined;
    target: keyof T;
}) => (record: R, { rows, req }: {
    rows: R[];
    req: Request;
}) => Promise<any>;
export declare const populateReferenceManyCount: <R extends RaRecord, T extends RaRecord>({ fetchAll, source, target }: {
    fetchAll: (rows: R[]) => Promise<T[]>;
    source?: keyof R | undefined;
    target: keyof T;
}) => (record: R, { rows, req }: {
    rows: R[];
    req: Request;
}) => Promise<any>;
export declare const populateReferenceOne: <R extends RaRecord, T extends RaRecord>({ fetchAll, source, target }: {
    fetchAll: (rows: R[]) => Promise<T[]>;
    source?: keyof R | undefined;
    target: keyof T;
}) => (record: R, { rows, req }: {
    rows: R[];
    req: Request;
}) => Promise<any>;
export {};
